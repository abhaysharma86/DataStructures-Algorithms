It is important to understand that a local variable of the enclosing scope cannot be modified by the lambda expression. Doing so would remove its effective final status, thus rendering it illegal for capture.

There are certain key points to be remembered, which are as follows:

1. Any local variable, formal parameter, or exception parameter used but not declared in a lambda expression must either be declared final or be effectively final , or a compile-time error occurs where the use is attempted.
2. Any local variable used but not declared in a lambda body must be definitely assigned before the lambda body, or a compile-time error occurs.

Explanation:

In Java, the concept of "enclosing scope" refers to the outer context or environment in which a piece of code or block of code (like a method, constructor, or loop) is defined.
When talking about "enclosing scope" in relation to variables or methods, it often refers to the surrounding methods or classes that define and provide access to certain elements.

Here's an example to illustrate the concept of "enclosing scope" using inner classes and how an inner class can access variables or methods from its enclosing class:

public class OuterClass {
    // Variable in the enclosing scope (OuterClass) or saying local variable for OuterClass
    private String outerVar = "Hello from Outer Class";

    // Method in the enclosing scope (OuterClass)
    public void outerMethod() {
        System.out.println("Outer Method Called");
    }

    // Inner class inside the enclosing scope
    public class InnerClass {
        int data = 0; // local variable for innerClass
        // Accessing a variable from the enclosing scope (OuterClass)
        public void printOuterVar() {
            System.out.println(outerVar); // Can access outerVar from OuterClass
        }

        // Accessing a method from the enclosing scope (OuterClass)
        public void callOuterMethod() {
            outerMethod(); // Can call outerMethod() from OuterClass
        }
    }

    public static void main(String[] args) {
        OuterClass outer = new OuterClass();
        OuterClass.InnerClass inner = outer.new InnerClass();

        inner.printOuterVar(); // Output: Hello from Outer Class
        inner.callOuterMethod(); // Output: Outer Method Called
    }
}

Key Points:
Enclosing Scope (OuterClass): The OuterClass is the enclosing scope for the InnerClass. It defines variables and methods that are accessible from within the InnerClass.

InnerClass Accessing OuterClass: The InnerClass can access the fields and methods of OuterClass because it is defined within the enclosing scope. Specifically:

The InnerClass can access the outerVar field.
The InnerClass can also invoke the outerMethod() from OuterClass.




In Java, when you use a lambda expression, any local variable, formal parameter, or exception parameter from the enclosing method or scope must either be declared final or be effectively final. An effectively final variable is one whose value is never modified after it is initialized.

If you try to use a variable in a lambda expression that is not final or effectively final, the Java compiler will throw a compile-time error.


Ex:1:

public class LambdaExample {
    public static void main(String[] args) {
        // Local variable (effectively final)
        int num = 10;  // This variable is not declared final, but its value is not changed, so it is effectively final

        // Lambda expression that uses num
        Runnable r = () -> System.out.println("The value of num is: " + num);

        // Execute the lambda
        r.run();
    }
}
Explanation:
num is not explicitly declared final, but its value is never modified after initialization. Therefore, it is effectively final.
This allows the lambda expression to use num without any issues.

Example 2: Non-Final or Non-Effectively Final Variable in Lambda Expression
If you try to modify num after it has been initialized, it will no longer be effectively final, and using it inside a lambda expression will cause a compile-time error.


public class LambdaExample {
    public static void main(String[] args) {
        // Local variable (not effectively final)
        int num = 10;  // This variable is not declared final, and we will modify it later

        // Modify num after it has been initialized
        num = 20;  // Now num is no longer effectively final

        // Lambda expression that tries to use num
        Runnable r = () -> System.out.println("The value of num is: " + num);  // Compile-time error

        // Execute the lambda
        r.run();
    }
}
Explanation:
num is modified after its initial declaration (from 10 to 20), which means it's no longer effectively final.
As a result, you get a compile-time error because the lambda expression attempts to use a non-final variable.


Compile-time Error:
Local variable num defined in an enclosing scope must be final or effectively final


Example: Using a final Variable Inside a Lambda Expression:
public class LambdaExample {
    public static void main(String[] args) {
        // Declaring a final variable
        final int num = 10;

        // Lambda expression that uses the final variable
        Runnable r = () -> System.out.println("The value of num is: " + num);

        // Execute the lambda
        r.run();  // Output: The value of num is: 10
    }
}


Explanation:
The variable num is declared as final, meaning its value is fixed and cannot be changed.
Inside the lambda expression, the final variable num is used. This is allowed because the lambda can capture and use final variables.
The lambda expression executes without any issues.

Key Points:
Final Variables: Any variable declared final can be safely used inside a lambda expression because it guarantees that the value won't change.
Effectively Final Variables: A variable that is not explicitly declared final but whose value is never modified after initialization is considered effectively final and can also be used inside a lambda expression (as seen in the previous example).
Immutable: Both final and effectively final variables cannot be modified after their initial assignment, which satisfies the requirements for use in lambda expressions.

------------------------------------ WHY -------------------------
The reason you cannot use a non-final or non-effectively final variable in a lambda expression in Java is tied to how Java handles closures and the immutability of variables captured by lambdas.

Here’s a deeper explanation of the core concepts:

1. Lambda Expressions and Closures
A lambda expression in Java can capture and use variables from its enclosing method. This is known as closure. When a lambda captures a variable, it essentially refers to that variable from the enclosing scope, and the variable becomes part of the lambda’s state.

However, Java's design for lambda expressions is such that it does not allow mutable variables (i.e., variables that can be changed after being captured) to be captured by the lambda, because that would create inconsistent and unexpected behavior.

2. Why Final or Effectively Final Variables?
To understand why

a) Immutability and Predictability
A final or effectively final variable is guaranteed to never change after its initial assignment.
When a lambda captures a final or effectively final variable, it can be safely assumed that the value will remain the same throughout the lifetime of the lambda, ensuring predictability and consistency.
b) Thread Safety
In multi-threaded environments, mutable state can lead to race conditions. If the lambda could capture and modify a variable in the enclosing scope, it might cause unpredictable results, especially when different threads try to access the same variable.
Java enforces that captured variables in lambdas be final or effectively final to prevent such race conditions.
c) Consistency of the Captured Variable
If a lambda could capture a mutable variable (i.e., one that is modified after being captured), it would create a situation where the lambda might operate on different values of the variable depending on when it is executed. This would be problematic.

Consider this scenario:

public class LambdaExample {
    public static void main(String[] args) {
        int num = 10;

        // Lambda expression that uses 'num'
        Runnable r = () -> System.out.println("The value of num is: " + num);

        num = 20;  // Modify 'num' after the lambda is created

        r.run();  // Output: The value of num is: 20
    }
}

In this case, if you modify num after the lambda is created, the lambda could see the updated value (20), even though it was created when num was 10. This creates inconsistency and unpredictability in the behavior of the program.

Allowing variables to be captured by lambdas and modified could lead to confusing and unpredictable results, especially when it comes to concurrent execution.

d) Enforcing Capturing Final Variables
By enforcing final or effectively final variables, Java simplifies reasoning about the behavior of lambdas, ensuring that once a variable is captured by a lambda, its value remains constant throughout the execution.
3. Practical Example
Let’s look at two cases—one where the variable is final (or effectively final), and one where it is modified.

Case 1: Final or Effectively Final Variable
public class LambdaExample {
    public static void main(String[] args) {
        // Local variable (effectively final)
        final int num = 10;  // Explicitly final

        // Lambda expression that uses the final variable
        Runnable r = () -> System.out.println("The value of num is: " + num);

        r.run();  // Output: The value of num is: 10
    }
}

In this case, num is final (or effectively final if you had not declared it final but never modified it). The lambda expression can safely capture and use num without any issues.

Case 2: Non-Final or Mutable Variable:
public class LambdaExample {
    public static void main(String[] args) {
        // Local variable
        int num = 10;

        // Modifying the variable after initialization
        num = 20;  // Now 'num' is no longer effectively final

        // Lambda expression that tries to use 'num'
        Runnable r = () -> System.out.println("The value of num is: " + num);  // Compile-time error

        r.run();
    }
}

Here, num is modified after its initialization. This makes it non-final, and therefore, Java will not allow it to be captured inside the lambda expression. The compiler will generate a compile-time error because it is not final or effectively final.

4. What Happens Internally?
When a lambda expression is created, Java internally converts it into a serialized object (a kind of closure). This serialized object holds references to the variables captured by the lambda.

If a variable could be modified after it is captured, there would be no guarantee of the variable's state when the lambda is executed. This would cause unexpected behavior. Java requires the captured variable to be final or effectively final so that it is immutable during the lambda’s lifecycle, ensuring that the lambda always works with a stable value.