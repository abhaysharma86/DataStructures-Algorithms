Function Interface:
---------------------


It represents a function which takes in one argument and produces a result. Hence this functional interface takes in 2 generics namely as follows:

T: denotes the type of the input argument
R: denotes the return type of the function

The lambda expression assigned to an object of Function type is used to define its apply() which eventually applies the given function on the argument.

Methods in Function Interface
The Function interface consists of the following 4 methods as listed which are later discussed as follows:

1. apply()
2. andThen()
3. compose()
4. identity()

Method 1: apply():
-----------------

Syntax:

R apply(T t)

Parameters: This method takes in only one parameter t which is the function argument

Return Type: This method returns the function result which is of type R.

Method 2: andThen()

It returns a composed function wherein the parameterized function will be executed after the first one. If evaluation of either function throws an error, it is relayed to the caller of the composed function.

Syntax:

default <V> Function<T, V>
andThen(Function<? super R, ? extends V> after)
where V is the type of output of the after function, and of the composed function

Parameters: This method accepts a parameter after which is the function to be applied after the current one.

Return Value: This method returns a composed function that applies the current function first and then the after function

Exception: This method throws NullPointerException if the after function is null.